src:
  festou_1992: "Tests vectorial model against data from Festou 1992, comet d'Arrest apparition"
  fortran_comparison: "Runs python and fortran vectorial models with comparison graphs and output"
  haser_compare: "Runs Haser and vectorial model, compares column density numerically and with a few plots"
  inspectvm: "Loads a pickled .vm file directly, or a .yaml file pointing to a .vm file for plotting"
  multirun: "Main tool for running vectorial model, with batch capability for some parameters"
  outbursts: "Runs models with time dependence for producing outburst animations"
  timescales_vs_production: "(Needs conversion) Varies the Q and parent lifetimes to test model stability"

outburst_animations:
  description: "Using time-dependent production code to generate coma animations: only one base_q per run should be used"

sputter_comparison:
  description: "Investigation of the differences in fragment sputter between fortran and python vectorial models"
  comparison_data: "Contains data runs for fragment_sputtering_comparison.pdf"

model_stability:
  description: "Testing the input production limits that will break the model"

TODOs:
  sputtering_comparison: "Rotate figures in document to horizontal"
  pyvectorial: "find a way to save entire coma object"
  sbpy: "rewrite vectorial model without dictionaries?"
  vmplotter: "rewrite to only plot given an axis?"
  all: "move key to print_volume_density from print_radial_density"
  all: "Write a function that takes a vectorial model and fits Haser parameters to it"
  all: "Compare vectorial runs with different Qs, checking that the column density ratios are the same as the Q ratios"
  all: "Does limiting to 8 fragment lifetimes undercut fragment sputter when the production is very high?"
  all: "Add ModelParams to vmconfig for passing destruction level etc. to vectorial model"
